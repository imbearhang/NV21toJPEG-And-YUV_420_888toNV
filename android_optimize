public static final class FileManager {
        public static void writeFrame(File dir, String fileName, byte[] data) {
            try {
                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File(dir, fileName)));
                bos.write(data);
                bos.flush();
                bos.close();
//            Log.e(TAG, "" + data.length + " bytes have been written to " + filesDir + fileName + ".jpg");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * YUV TO NV NV21 TO JPGE
     */
    public static final class ImageUtil {

        public static byte[] imageToByteArray(Image image) {
            byte[] data = null;
            if (image.getFormat() == ImageFormat.JPEG) {
                Image.Plane[] planes = image.getPlanes();
                ByteBuffer buffer = planes[0].getBuffer();
                data = new byte[buffer.capacity()];
                buffer.get(data);
                return data;
            } else if (image.getFormat() == ImageFormat.YUV_420_888) {
                data = NV21toJPEG(
                        YUV_420_888toNV21(image),
                        image.getWidth(), image.getHeight());
            }
            return data;
        }

        private static byte[] YUV_420_888toNV21(Image image) {
            byte[] nv21;
            ByteBuffer yBuffer = image.getPlanes()[0].getBuffer();
            ByteBuffer uBuffer = image.getPlanes()[1].getBuffer();
            ByteBuffer vBuffer = image.getPlanes()[2].getBuffer();

            int ySize = yBuffer.remaining();
            int uSize = uBuffer.remaining();
            int vSize = vBuffer.remaining();

            nv21 = new byte[ySize + uSize + vSize];

            //U and V are swapped
            yBuffer.get(nv21, 0, ySize);
            vBuffer.get(nv21, ySize, vSize);
            uBuffer.get(nv21, ySize + vSize, uSize);

            return nv21;
        }

        private static byte[] NV21toJPEG(byte[] nv21, int width, int height) {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            YuvImage yuv = new YuvImage(nv21, ImageFormat.NV21, width, height, null);
            yuv.compressToJpeg(new Rect(0, 0, width, height), 100, out);
            return out.toByteArray();
        }
    }
    
     public class ImageSaver implements Runnable {

        /**
         * The JPEG image
         */
        public final Image mImage;

        ImageSaver(Image image) {
            mImage = image;
        }

        @Override
        public void run() {
            String fileName = !nextFileName.equals("") ? nextFileName : (new Date().getTime()) + ".jpg";
            showToast("SAVED: " + fileName + " ,COST: " + ((new Date().getTime() - captureStart.getTime())));
            try {
                byte[] jpegData = ImageUtil.imageToByteArray(mImage);
                File dir = Objects.requireNonNull(Camera2BasicFragment.this.getActivity()).getExternalFilesDir(null);
                FileManager.writeFrame(dir, new Date().getTime() + ".jpg", jpegData);
                mImage.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }
